import englishMessages from "ra-language-english";
import * as domainMessages from "react-admin-import-csv/lib/i18n";

const messages = {
  ...englishMessages,
  ...domainMessages.en,
  login: {
    basicMessage: "Authenticate to continue",
    title: "Resource Manager",
    message: "Access with AAC",
  },
  titlePages: {
    dashboard: "Playful Education",
    domains: {
      list: "Domains",
      edit: "Edit domain",
      create: "Create domain",
      show: "Domain",
      delete: "Delete domain",
    },
    educators: {
      list: "Educators",
      edit: "Edit educator",
      create: "Create educator",
      show: "Educator",
      delete: "Delete educator",
    },
    learners: {
      list: "Learners",
      edit: "Edit learner",
      create: "Create learner",
      show: "Learner",
      delete: "Delete learner",
    },
    concepts: {
      list: "Concepts",
      edit: "Edit concept",
      create: "Create concept",
      show: "Concept",
      delete: "Delete concept",
    },
    competences: {
      list: "Competences",
      edit: "Edit competence",
      create: "Create competence",
      show: "Competence",
      delete: "Delete competence",
    },
    externalActivities: {
      list: "External activities",
      edit: "Edit external activity",
      create: "Create external activity",
      show: "External activity",
      delete: "Delete external activity",
    },
    learningScenarios: {
      list: "Scenarios",
      edit: "Edit scenario",
      create: "Create scenario",
      show: "Scenario",
      delete: "Delete scenario",
      learners: {
        show: "Learners of the scenario",
        edit: "Edit the learners of the scenario",
      },
    },
    modules: {
      list: "Modules",
      edit: "Edit module",
      create: "Create module",
      show: "Module",
      delete: "Delete module",
    },
    learningFragments: {
      list: "Fragments",
      edit: "Edit fragment",
      create: "Create fragment",
      show: "Fragment",
      delete: "Delete fragment",
    },
    activities: {
      edit: "Edit activity",
      create: "Create activity",
      show: "Activity",
      delete: "Delete activity",
    },
  },
  resources: {
    info: "Information",
    dashboard: {
      welcome: "Welcome to Playful Education",
      button: "Domains' list",
    },
    domains: {
      title: "Title",
      empty: "No domains found",
      search: "Search domain",
      back: "Domains",
      addOne: "Would you like to add one?",
      singular: "domain",
      plural: "domains",
    },
    users: {
      menu: "Users",
    },
    educators: {
      menu: "Educators",
      firstname: "Name",
      lastname: "Last name",
      nickname: "Nickname",
      email: "Email",
      empty: "No educators found",
      addOne: "Would you like to add one?",
      singular: "educator",
      plural: "educators",
    },
    learners: {
      menu: "Learners",
      firstname: "Name",
      lastname: "Last name",
      nickname: "Nickname",
      email: "Email",
      empty: "No learners found",
      addOne: "Would you like to add one?",
      singular: "learner",
      plural: "learners",
    },
    concepts: {
      menu: "Concepts",
      title: "Title",
      empty: "No concepts found",
      addOne: "Would you like to add one?",
      singular: "concept",
      plural: "concepts",
    },
    competences: {
      title: "Title",
      description: "Description",
      type: "Type",
      concepts: "Concepts",
      menu: "Competences",
      empty: "No competences found",
      addOne: "Would you like to add one?",
      knowledgeSelection: {
        knowledge: "Knowledge",
      },
      singular: "competence",
      plural: "competences",
    },
    externalActivities: {
      menu: "External activities",
      title: "Title",
      description: "Description",
      url: "URL",
      type: "Type",
      language: "Language",
      tool: "Tool",
      difficulty: "Difficulty",
      groupCorrelator: "Group correlator",
      preconditions: "Preconditions",
      effects: "Effects",
      typeSelection: {
        individual: "Individual",
      },
      toolSelection: {
        computer: "Computer",
      },
      difficultySelection: {
        low: "Low",
      },
      empty: "No external activities found",
      addOne: "Would you like to add one?",
      singular: "external activity",
      plural: "external activities",
    },
    learningScenarios: {
      back: "Scenarios",
      menu: "Scenarios",
      title: "Title",
      description: "Description",
      language: "Language",
      publicScenario: "Scenario",
      publicScenarioOption: {
        public: "Public",
        private: "Private",
      },
      status: "Status",
      statusOption: {
        inProgress: "In progress",
        toStart: "To start",
      },
      start: "Start",
      statusNotification: {
        success: "Scenario started successfully",
        error: "Error starting the scenario",
      },
      educators: "Educators",
      learners: {
        title: "Learners",
      },
      empty: "No learning scenarios found",
      addOne: "Would you like to add one?",
      singular: "scenario",
      plural: "scenarios",
      noScenarioLearners: "No students are associated with this scenario",
      addLearners: "Would you like to add some?",
      noDomainLearners: "No students present in the domain",
    },
    modules: {
      menu: "Modules",
      back: "Modules",
      title: "Title",
      description: "Description",
      level: "Level",
      dateFrom: "Start date",
      dateTo: "End date",
      empty: "No modules found",
      addOne: "Would you like to add one?",
      singular: "module",
      plural: "modules",
      toDateBeforeFromDate: "The end date must be later than the start date",
    },
    learningFragments: {
      menu: "Fragments",
      back: "Module",
      title: "Title",
      type: "Type",
      rule: "Completion rule",
      minimumNumberOfActivities: "Minimum number of activities",
      empty: "No fragments found",
      addOne: "Would you like to add one?",
      typeSelection: {
        singleton: "Singleton",
        set: "Set",
        list: "List",
      },
      ruleSelection: {
        all: "All activities",
        at_least: "At least a minimum number",
        at_least_label:
          "At least 1 activity |||| At least %{number} activities",
      },
      singular: "fragment",
      plural: "fragments",
      singletonFragmentError:
        "Edit failed. A singleton fragment must have only one activity",
      activitiesNotYetLoaded: "Activities not yet received from the server",
    },
    activities: {
      menu: "Activities",
      back: "Module",
      title: "Title",
      description: "Description",
      type: "Type",
      externalActivity: "External activity",
      goals: "Goals",
      groupCorrelator: "Group correlator",
      empty: "No activities found",
      addOne: "Would you like to add one?",
      typeSelection: {
        concrete: "Concrete",
        abstr: "Abstract",
        group: "Group",
      },
      singular: "activity",
      plural: "activities",
      viewFragmentActivities: "Select a fragment to view its activities",
    },
    validation: {
      minValue: "Value must be greater that or equal to %{min}",
    },
  },
};

export default messages;
